// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  names     String
  surnames  String
  createdAt DateTime @default(now())
  sensors   Sensor[]
  reports   Report[]
}

model Sensor {
  id              Int           @id @default(autoincrement())
  name            String
  location        Location      @relation(fields: [locationId], references: [id])
  locationId      Int
  measurements    Measurement[]
  connected       Boolean
  batteryLevel    Int? // Puede ser nulo, ya que podría no tener batería o no se mide.
  temperatureMax  Int?          @default(30) // Valores por defecto comunes para sensores.
  temperatureMin  Int?          @default(0)
  humidityMax     Int?          @default(100)
  humidityMin     Int?          @default(0)
  readingInterval Int?          @default(10) // Intervalo de lectura en minutos.
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  addedAt         DateTime      @default(now())
  updatedAt       DateTime      @updatedAt // Esto tiene sentido si los sensores pueden cambiar su nombre u otros datos.
  reports         Report[]
}

model Location {
  id      Int      @id @default(autoincrement())
  address String
  sensors Sensor[]
}

model Measurement {
  id          Int      @id @default(autoincrement())
  sensor      Sensor   @relation(fields: [sensorId], references: [id])
  sensorId    Int
  temperature Float
  humidity    Float
  timestamp   DateTime // Este campo debe ser obligatorio, ya que una medición siempre debe tener una marca de tiempo.
}

model Report {
  id        Int      @id @default(autoincrement())
  sensor    Sensor   @relation(fields: [sensorId], references: [id]) // Relación correcta con Sensor.
  sensorId  Int
  content   String // Campo para almacenar el contenido del reporte.
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id]) // Relación correcta con User.
  userId    Int // Clave foránea que apunta al usuario que generó el reporte.
}
